# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LoP2FRVSQnr3fWaQkW0spZTJ6ECMJlTW

**Installing Libraries**
"""

!pip install sentence-transformers
!pip install transformers
!pip install torch
!pip install accelerate

"""**Import Libraries**"""

from sentence_transformers import SentenceTransformer, util
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch
import re

# Load sentence transformer model
mini_model = SentenceTransformer('all-MiniLM-L6-v2')

# Load language model and tokenizer
llm_model_id = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
tokenizer = AutoTokenizer.from_pretrained(llm_model_id)
llm_model = AutoModelForCausalLM.from_pretrained(llm_model_id)

# Move model to available device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
llm_model.to(device)

# Career Paths & Explanations Data
career_paths = {
    "STEM": "Math, technology, engineering, coding, analytics",
    "Arts": "Creativity, design, painting, music, writing",
    "Sports": "Athletics, physical activity, games, teamwork, fitness",
    "Business": "Leadership, management, entrepreneurship, finance, marketing",
    "Healthcare": "Medicine, nursing, mental health, caregiving, diagnostics",
    "Social Sciences": "Psychology, sociology, human behavior, communication",
    "Law & Politics": "Debating, justice, legal systems, public speaking, policy-making",
    "Education": "Teaching, mentoring, training, learning methodologies",
    "Environment & Sustainability": "Ecology, climate change, conservation, sustainability",
    "Trades & Skilled Work": "Hands-on work, mechanical skills, craftsmanship, construction",
    "Media & Communication": "Journalism, content creation, social media, storytelling",
    "Gaming & Esports": "Competitive gaming, strategy, reflexes, digital collaboration",
    "Military & Defense": "Discipline, leadership, tactics, national service"
}

fallback_explanations = {
    "STEM": "You enjoy problem-solving and working with data or technology.",
    "Arts": "You have a creative mindset and a love for expression and design.",
    "Sports": "You show interest in physical activity, teamwork, and discipline.",
    "Business": "You're motivated by goals, leadership, and creating value through strategy.",
    "Healthcare": "You care deeply about helping others and are drawn to medical science.",
    "Social Sciences": "You’re curious about people, culture, and how society works.",
    "Law & Politics": "You’re passionate about justice, debate, and influencing change.",
    "Education": "You enjoy sharing knowledge and helping others learn and grow.",
    "Environment & Sustainability": "You’re driven to protect nature and build a greener future.",
    "Trades & Skilled Work": "You like hands-on work and solving real-world problems with skill.",
    "Media & Communication": "You thrive on storytelling, content, and connecting with people.",
    "Gaming & Esports": "You're strategic, competitive, and love digital challenges.",
    "Military & Defense": "You value discipline, honor, and service with a mission."
}

# Ask Initial Questions
print(" Hello! I’m your Career Companion ")
print("I'm here to help you discover a career path that matches your personality and interests.\n")

open_questions = [
    "What activities or topics do you enjoy the most in your free time?",
    "What kind of things excite or inspire you?",
    "What are your hobbies or things you naturally gravitate toward?",
    "If you're unsure, just say 'I don't know'."
]

responses = []
for q in open_questions:
    answer = input(f"{q}\n Your answer: ")
    responses.append(answer)

"""**Handle 'I Don't Know' Responses**"""

ambiguous_keywords = ["don't know", "not sure", "no idea", "nothing", "none", "no interest"]

user_input = " ".join(responses)
user_input_normalized = re.sub(r"[^\w\s]", "", user_input.lower())
if any(keyword in user_input_normalized for keyword in ambiguous_keywords):
    print("\n No worries! Let's try a few quick questions instead.\n")
    user_input = ""
    psych_questions = [
        " Do you enjoy working with people, tools, computers, or ideas the most?",
        " What kind of environment makes you feel most comfortable? (classroom, outdoors, lab, stage, etc.)",
        " What do you value more — creativity, logic, helping others, or leadership?",
        " If you could learn any one skill instantly, what would it be?",
        " What kind of problems do you like solving — people’s issues, technical bugs, puzzles, or design challenges?"
    ]
    for q in psych_questions:
        answer = input(f"{q}\n  Your answer: ")
        user_input += answer + " "

# Match to Career Path Using Embeddings
user_embedding = mini_model.encode(user_input, convert_to_tensor=True)
scores = {}

for path, description in career_paths.items():
    path_embedding = mini_model.encode(description, convert_to_tensor=True)
    similarity = util.cos_sim(user_embedding, path_embedding).item()
    scores[path] = similarity

best_match = max(scores, key=scores.get)

print("\n I’ve thought about it...")
print(f" Based on what you've shared, a great career path for you might be: *{best_match}*")
print(f" Why? {fallback_explanations[best_match]}")

# Generate Friendly Explanation
prompt = f"""
### Instruction:
A student shared their interests as: "{user_input}"
They were matched with the career path: "{best_match}".

Write a short paragraph (2–3 sentences) explaining clearly why this career fits their interests.
Avoid saying thank you or referring to yourself. Focus only on the student's interests and how they connect to the career.

### Response:
"""

inputs = tokenizer(prompt, return_tensors="pt").to(device)
output = llm_model.generate(
    **inputs,
    max_new_tokens=150,  # Slightly increased to avoid cut-off
    temperature=0.7,
    top_p=0.9,
    pad_token_id=tokenizer.eos_token_id
)

generated_text = tokenizer.decode(output[0], skip_special_tokens=True)
explanation = generated_text.split("### Response:")[-1].strip()

print("\n AI-Powered Insight Just for You:")
print(f" {explanation}")